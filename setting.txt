

git install
https://git-scm.com/download/win


visual studio community 2019
https://visualstudio.microsoft.com/vs/


ms visual c++ 2015
Download Microsoft Visual C++ Redistributable (All Versions) - iTechtics
https://www.microsoft.com/en-pk/download/details.aspx?id=48145


mysql
https://dev.mysql.com/downloads/windows/installer/8.0.html
mysql-installer-community-8.0.17.0.msi

https://dev.mysql.com/downloads/windows/visualstudio/
mysql-for-visualstudio-1.2.8.msi


mysql install
port 3306
root / qkrtjdgh


visual studio setting
 create new project with windows form application
 need to install module 
 and language pack(if needed)
 created at C:\Users\me\source\repos\
 
 add datasource
	ServerExplorer > DataConnections > Add Connection
	ServerName : localhost
	Database name : created db name

 add MySql.Data, MySql.Data.Entity
	Solution Explorer > Manage Nuget Packages
 reference
 https://weblion303.net/689/


MySQL WorkBench
 create new schema
 charset utf-8? or default?


---------------
자몽로그
https://blog.naver.com/rkdwnsdud555/220813816179


키움 오픈 API를 이용한 분석 프로그램
https://wd501.tistory.com/39


https://dennisbot.tistory.com/16?category=637468


--------------------
과거 분봉을 가져오는 것을 어떻게 할지(기준일 지정으로 가능한지)
아이템에 타겟, 스테이터스, 구분(코스피/코스닥)를 가질것
아이템에 일봉시작, 일봉 끝, 분봉시작(일), 분봉끝(일), 일봉이평작성시작(일), 일봉이평작성끝(일), 분봉이평작성시작(일), 분봉이평작성끝(일) 가질 것

타이머 만들기
실시간일 경우에 실시간 반환
시뮬일 경우에 지정 시간에서 시작해서 잡리스트에 아무것도 없을 경우에 +3분할 것
잡리스트에 타이머시간보다 이후의 잡이 있을 경우 순차적으로 실시

개장일리스트 만들기
	int형리스트를 만들고
	파일로드
	현재일을 설정하면 그날짜의 인덱스를 저장하고
	전일, 다음일을 쉽게 가져올수 있도록한다

잡리스트
로드 아이템
겟아이템 api
로드 일봉
겟일봉
로드 분봉
겟분봉
체크

아이템 검색 기능
	종목명 전방검색 리스트에 출력
	타겟, 스테이터스 별로 검색 기능 넣을 것
	아이템(코드로 검색시)이 없을 경우 api로 가져오는 기능


시작이 눌리면 코드 입력으로부터 받은 코드로 아이템이 존재하는지 확인
	없을 경우에 api로 가져온다(잡 등록)
	있을 경우에는 시작일부터 종료일의 일봉, 분봉데이터를 디비에서 가져온다
	
	아이템 일봉시작이 없으면 최신일부터 200일 정도의 데이터를 디비에 저장
	아이템 일봉시작, 일봉끝갱신
	아이템일봉끝 < 전일입력이면 데이터를 받아서 아이템일봉끝부터 전일입력까지의 데이터를 디비에 넣어줄것
	아이템 일봉끝갱신

	아이템 일봉이평작성시작(일)이 없으면 일봉처음부터 240개를 취득해서
	이평데이터를 작성 후 갱신해 준다
	일봉이평작성시작(일), 일봉이평작성끝(일)을 갱신(5,20,120이평정보가 다 있는 날짜를 적어준다)
	일봉이평작성끝(일) < 전일입력이면 일봉이평작성끝(일) 보다 이전120일부터 전일입력까지의 데이터를 취득해서
	이평데이터를 작성 후 갱신해 준다
	(갱신시에 처음 취득시의 데이터가 5,20,120이평정보가 다 있는 경우에는 갱신 스킵)


	아이템 분봉시작 없을 경우에는 api로 가져온다(잡 등록)
	api로 6일분의 데이터를 디비에 넣어준다
	아이템 분봉시작 분봉끝 갱신
	아이템 분봉끝 < 전일입력이면 데이터를 받아서 분봉끝부터 전일입력까지의 데이터(연속조회?가 필요할 것)를 디비에 넣어줄것
	아이템 분봉끝 갱신

	전일입력-n일부터 전일까지의 일봉, 전일, 당일(전일+1)의 분봉을 가져와서 체크 대상으로 활용한다
	실시간:
	타이머 인터벌 후 실시간 3분봉데이터를 가져오고 메모리상의 데이터를 갱신한 후 매수매도체크를 하고
	대상이 아닐경우 다음인터벌에 다시 실시간 3분봉데이터를 가져오도록 잡등록
	시뮬:
	타이머를 당일9시로 셋팅하여 시작
	타이머 인터벌 후(3분씩 추가한다 9:01, 9:04 이런 식으로) 당일 분봉의 타이머 시간 분의 데이터를 대상으로 매수매도체크를 하고
	대상이 아닐경우 다음인터벌에 다시 실시간 3분봉데이터를 가져오도록 잡등록
	

	체크시작일부터 체크종료일까지의 날짜에 대해서 루프
		코드 아이템분 루프
			여러 룰 분 루프
				체크할 것

				
	
	
관심종목을 가져와서 디비에 저장
	저정된 아이템이 타겟일 경우 최신 일봉, 분봉데이터가 없을 경우 가져올 것(잡에 등록)
	디비의 일봉 분봉데이터를 보고 없을 경우에 가져올 것(잡에 등록)
	일봉의 경우 최근 100일 정도분만, 3분봉의 경우는 일단 볼 것
	가져온 데이터에 관해 이평선 정보 만들어 줄 것(잡에 등록)
	


타이머 시작, 스탑, 종료 버튼을 만들것
	타이머 종료시 남아있는 잡을 모두 종료
	시뮬레이션의 경우에는 그냥 종료(타이머가 필요 없을지도)
	실시간의 경우에는 매수 중인 것을 매도하고 종료


타이머가 필요한테 api에 날리는 것은 4초에 한번 날리는 것으로
	데이터를 받아오면 디비에 넣어주고
	이평데이터를 갱신
	실시간 장중에는 체크로직을 돌린다
	장중이 아닐 경우에는 데이터 갱신만 한다.
	갱신후 잡에서 날려줄 것


잡 리스트를 만들것
	화면갱신 로직을 만들것
	다음 실시 시간
	구분 - api콜인지 아니면 다른 것인지
	잡 내용


전일 입력,오늘 입력을 받아서
	전일 입력있고 오늘 입력이 없으면 실시간
입력 대상코드에 관해서 루프를 돌면서 확인한다.
	대상코드가 없으면 디비의 대상 코드리스트에 관해 실시

일봉정보에 전일-20에서 전일+1분의 일봉정보를 취득
	전일+1일분이 없으면 실시간
	전일-20이 없거나 부족하면 데이터가 부족하므로 처리를 스킵하고 다음으로 넘어가거나
	api로 데이터를 가져와서 디비에 넣어주고 처리할 것

오늘입력의 분봉정보를 디비에서 가져온다
	없을 경우 api로 가져온다(슬레이브를 생성해서 전용 크롤러로 만들것인지 검토)
	실시간의 경우 지금 시간이 아니면 최신 정보를 가져온다

룰에 따라 체크로직을 진행
	실시간일 경우 현재 시간의 데이터만 체크
	실시간이 아닐 경우 체크대상일의 처음부터 체크 시작

체크 결과 매수 대상의 경우 매수 진행
	실시간의 경우에 다시 실시간 정보를 체크할 대상으로 이동
	대상이 아닐경우 다음 타임에 다시 확인
	
매수 상태의 경우 매도 체크를 실시
	실시간의 경우에 다시 실시간 정보를 체크할 대상으로 이동	
	대상이 아닐경우 다음 타임에 다시 확인
	
--------------------

SortedList l = new SortedList();


--------------------
3min

9	10	11	12	13	14	15	|9	10	11	12	13	14	15
20	20	20	20	20	20	10	|20	20	20	20	20	20	10


130 + 130 = 260

--------------------

신규데이터부터 받으므로(최신 데이터는 미완료일수도...)
array의 가장 뒤 부터 data를 등록하고 이미 등록된 레코드의 최신 버전은 갱신한다(미완료의 가능성이 있으므로)
다시 array의 앞에서부터(갱신,등록) 이평 데이터를 계산해서 넣어준다.

--------------------

주어진 기간에 한해서 일봉데이터를 앞에서부터 하루씩 체크
해당 일로부터 n일전에 n프로의 장대 양봉이 있었는지
그 장대 양봉은 다시 그 바로 전 일의 거래량의 n배 이상인지
장대 양봉 발생 후 모든 봉이 장대 양봉의 n보다 가격이 떨어진 적이 없는지
5이평 20이평 120이평의 차이 확인
수렴하는 것 어떻게 수렴하는지...
작은 양봉 혹은 음봉


장대 양봉 후 바로 그 다음날 갭 음봉이나 
거래량 줄어들고 장대 양봉을 훼손하지 않는 음봉일 경우

-> 매치 될 경우 바로 그 다음날 어떻게 되는지를 확인

-------------------
매도.... 고가에서 꼬리달고 몇퍼정도 떨어지면 팔기
매수하고 나서 얼마나 시간이 지났는지에 따라 다르게 설정해볼것


-------------------

분봉차트에서 현재가가 어떻게 오는지... 종가와는 다른 항목으로 오는것이 아닌가

-------------------

 Random rnd = new Random();
 int month = rnd.Next(1, 13); // 1 - 12
 int card = rnd.(52); // 0 - 51

-------------------
 
 String.IsNullOrEmpty();
 
-------------------
 
 panel1.Enabled = true;
 
-------------------
 
     public static void main(String[] args) {
        Calendar d = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
        d.set(2019, Calendar.JANUARY, 1);
        while (d.get(Calendar.YEAR) == 2019) {
            if (d.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY && d.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) {
                System.out.println(sdf.format(d.getTime()));
            }
            d.add(Calendar.DATE, 1);
        }
    }
 
 
-------------------
 
 var path = Path.Combine(Directory.GetCurrentDirectory(), "\\fileName.txt");
 
-------------------






